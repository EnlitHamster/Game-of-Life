grammar game.life.GoLDSL with org.eclipse.xtext.common.Terminals

generate goLDSL "http://www.life.game/GoLDSL"

/**
 * In the following text, we will present our interpretation of the grammar and the 
 * given constraints on it. From the assignment's text some ambiguity arises, especially
 * from the keywords "easy" and "complex". As no reference point has been given, we
 * decided that the grammar should be easy and not complex w.r.t. a non-programmer user.
 * 
 * That results in the following implementation guidelines:
 * 1 - The DSL should be as close to English as possible.
 * 2 - The propositions are combined in Disjunctive Normal Form (DNF), as it is the most 
 *     natural and simple to write.
 * 3 - The content of the propositions is limited to comparative statements using less than,
 *     equals to and greater than.
 * 4 - The combination of 2 and 3 ensures that all possible rules can be created, given the
 *     following lemmas: (a) any propositional logic statement can be written in DNF and
 *     (b) <, = and > create a total order on the set of natural numbers
 * 
 * For the Grid initialization the following holds:
 * 1 - The grid can be randomly initialized by using the Random keyword after Grid:
 * 2 - Both Patterns and Coordinates can be used simultaneously to generate the Grid
 * 3 - The Grid rules will be applied in sequence, this is to avoid conflicts in the rules
 */

Model:
	'Rules:' rules += EvaluationRule+ 
	'Grid:' (rand ?= 'Random')? init += GridRule*
;

// To avoid ambiguity for the user, we require all possible cases for alive cells to be covered
// This means, all cases from 0 to 8 have to be explicitly stated, either through RuleCompares
// or RuleOtherwise. The cases for Become alive take the "stay dead" as default, as in this case
// this assumption is grounded in the fact that the original game itself does not state such
// rules. For the previous ones this is different, and which one is default case, even if it may
// seem trivial, is not something to be discarded.

EvaluationRule: 
	outcome = Outcome
	condition = RuleCondition
;

RuleCondition: {RuleOtherwise} 'otherwise' | {RuleConj} 'when' conj = RuleConditionLevel1;

RuleConditionLevel1: compares += RuleCompare ('and' compares += RuleCompare)*;

RuleCompare:
	('neighbors')? // We identify this as optional text if it helps the user understand the DSL better
	op = Operator 
	amount = INT
;

enum Outcome:
	LIVE = 'Live' |
	DIE = 'Die'   |
	BECOMEALIVE = 'Become alive'
;

enum Operator:
	LT = 'less than' |
	EQ = 'equal to'  |
	GT = 'more than'
;

GridRule: Pattern | Coord | {Invert} 'Invert';

Pattern: state = State 'when' condition = PatternCondition;

PatternCondition: stmts += PatternStmt ('and' stmts += PatternStmt)*;

PatternStmt: 
	{PatternStmtX} 'x' (neg ?= 'not')? op = OperatorEx amount = INT 	|
	{PatternStmtY} 'y' (neg ?= 'not')? op = OperatorEx amount = INT
;

enum OperatorEx:
	LT = 'less than' |
	EQ = 'equal to'  |
	GT = 'more than' |
	MOD = 'divisible by'
;

enum State:
	ALIVE = 'Alive' |
	DEAD = 'Dead'
;

Coord: state = State ('in')? '(' x = INT ',' y = INT ')';

